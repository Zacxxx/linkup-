//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model LinkedinProfile {
  id           String   @id() @default(uuid())
  profileUrl   String?
  lastSyncDate String?
  userId       String
  user         User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SocialNetwork {
  id                            String          @id() @default(uuid())
  name                          String
  iconUrl                       String?
  importedGroupsAsSourceNetwork ImportedGroup[] @relation("sourceNetwork")
  dateCreated                   DateTime        @default(now())
  dateUpdated                   DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Group {
  id              String          @id() @default(uuid())
  name            String
  description     String?
  createdByUserId String
  createdByUser   User?           @relation(fields: [createdByUserId], references: [id], name: "createdByUser")
  groupMembers    GroupMember[]   @relation("group")
  importedGroups  ImportedGroup[] @relation("group")
  dateCreated     DateTime        @default(now())
  dateUpdated     DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model GroupMember {
  id          String   @id() @default(uuid())
  joinedAt    String?
  groupId     String
  group       Group?   @relation(fields: [groupId], references: [id], name: "group")
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Invitation {
  id          String   @id() @default(uuid())
  status      String?
  senderId    String
  sender      User?    @relation(fields: [senderId], references: [id], name: "sender")
  receiverId  String
  receiver    User?    @relation(fields: [receiverId], references: [id], name: "receiver")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Connection {
  id          String   @id() @default(uuid())
  connectedAt String?
  user1Id     String
  user1       User?    @relation(fields: [user1Id], references: [id], name: "user1")
  user2Id     String
  user2       User?    @relation(fields: [user2Id], references: [id], name: "user2")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model ImportedGroup {
  id              String         @id() @default(uuid())
  externalGroupId String?
  importedAt      String?
  groupId         String
  group           Group?         @relation(fields: [groupId], references: [id], name: "group")
  sourceNetworkId String
  sourceNetwork   SocialNetwork? @relation(fields: [sourceNetworkId], references: [id], name: "sourceNetwork")
  dateCreated     DateTime       @default(now())
  dateUpdated     DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  dateCreated      DateTime           @default(now())
  dateUpdated      DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  dateCreated    DateTime     @default(now())
  dateUpdated    DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                    String             @id() @default(uuid())
  name                  String?
  email                 String?            @unique()
  pictureUrl            String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation       String?
  emailVerified         Boolean?
  stripeCustomerId      String?
  status                UserStatus         @default(VERIFIED)
  globalRole            String             @default("USER")
  /// @password
  /// @omit
  password              String?
  dateCreated           DateTime           @default(now())
  dateUpdated           DateTime           @default(now()) @updatedAt()
  accounts              Account[]
  sessions              Session[]
  organizationRoles     OrganizationRole[]
  linkedinProfiles      LinkedinProfile[]  @relation("user")
  groupsAsCreatedByUser Group[]            @relation("createdByUser")
  groupMembers          GroupMember[]      @relation("user")
  invitationsAsSender   Invitation[]       @relation("sender")
  invitationsAsReceiver Invitation[]       @relation("receiver")
  connectionsAsUser1    Connection[]       @relation("user1")
  connectionsAsUser2    Connection[]       @relation("user2")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
